import os
import sys

import openai
from pytube import YouTube
import argparse
import requests

def download_audio_from_youtube(url):
    yt = YouTube(url)
    out_file = yt.streams.filter(only_audio=True).first().download("./audio_files/")
    base, ext = os.path.splitext(out_file)
    output_mp3 = base + '.mp3'
    os.rename(out_file, output_mp3)
    print('Audio file downloaded to: ', output_mp3)

    return output_mp3

def transcribe_audio(audio_file):
    with open(audio_file, 'rb') as file:
        transcript = openai.Audio.transcribe(model='whisper-1', file=file)["text"]

    print(f"Transcript from the video:\n\n{transcript}\n")

    return transcript

def get_transcript_from_youtube(url):
    audio_file = download_audio_from_youtube(url)
    transcript = transcribe_audio(audio_file)
    return transcript

def summarize_transcript(transcript):
    completion = openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=[
        {"role": "system", "content": "You are a helpful assistant that "
            "summarizes transcriptions from audio files as though you are the speaker."},
        {"role": "user", "content": (f"First summarize the most important topics "
            f"from the following transcript as though you are the speaker, emphasizing the most critical ideas "
            f"for your telegram channel. Do not reference that you're summarizing a transcript: {transcript}")
        },
    ]
    )

    response_message = completion.choices[0].message['content']
    return response_message

def handle_youtube_url(url):
    transcript = get_transcript_from_youtube(url)
    with open('transcript.txt', 'w') as f:
        f.write(transcript)

    #with open('transcript.txt', 'r') as f:
    #    transcript = f.read()

    summary = summarize_transcript(transcript)
    print(f"Here is the summary:\n\n{summary}\n")
    with open('summary.txt', 'w') as f:
        f.write(summary)
    
    return summary

def handle_audio_file(audio_file):
    transcript = transcribe_audio(audio_file)
    with open('transcript.txt', 'w') as f:
        f.write(transcript)

    summary = summarize_transcript(transcript)
    print(f"Response:\n\n{summary}\n")
    with open('summary.txt', 'w') as f:
        f.write(summary)

    return summary

def post_audio_to_telegram(audio):
    TELEGRAM_BOT_API_KEY = os.environ.get('TEST_CHANNEL_9000_BOT_API_KEY')
    MY_CHANNEL_NAME = os.environ.get("TEST_CHANNEL_ID")

    with open(audio, 'rb') as audio_file:
        response = requests.post(
            f'https://api.telegram.org/bot{TELEGRAM_BOT_API_KEY}/sendAudio',
            data={
                'chat_id': MY_CHANNEL_NAME,
                'title': 'Audio Summary',
                'caption': 'Here is the audio file related to the summary posted earlier.'
            },
            files={
                'audio': audio_file
            }
        )

    if not response.status_code == 200:
        print(response.text)



def post_summary_to_telegram(summary):
    TELEGRAM_BOT_API_KEY = os.environ.get('TEST_CHANNEL_9000_BOT_API_KEY')
    MY_CHANNEL_NAME = os.environ.get("TEST_CHANNEL_ID")

    response = requests.get(f'https://api.telegram.org/bot{TELEGRAM_BOT_API_KEY}/sendMessage', {
        'chat_id': MY_CHANNEL_NAME,
        'text': f"{summary}\n\nDisclaimer: the above summary was generated by a large language model. Take it with a grain of salt."
    })

    if not response.status_code == 200:
        print(response.text)


if __name__ == '__main__':
    # use argparse to proccess command line arguments
    argumentParser = argparse.ArgumentParser()
    argumentParser.add_argument("-u", "--url", help="Youtube URL")
    argumentParser.add_argument("-a", "--audio", help="Audio file")
    args = argumentParser.parse_args()

    if args.url:
        url = args.url
        summary = handle_youtube_url(url)
        post_summary_to_telegram(summary)
    elif args.audio:
        audio_file = args.audio
        summary = handle_audio_file(audio_file)
        post_audio_to_telegram(audio_file)
        post_summary_to_telegram(summary)
    else:
        print('Usage: python app.py <youtube_url>')
        sys.exit(1)

